
takeUpToH :: [[Char]] -> (Int,Int) -> Int -> [Char]
takeUpToH b (x, y) len = (take len (drop y (b !! x)))


takeUpToV :: [[Char]] -> (Int, Int) -> Int -> [Char]
takeUpToV b (x, y) len = take len $ map (!! x) $ drop y b

main :: IO ()
main = do
    let m = ["0123456789", 
             "abcdefghij", 
             "ABCDEFGHIJ",
             "........"]
    putStrLn $ show (takeUpToH m (0,0) 8) -- "01234567"
    putStrLn $ show (takeUpToH m (0,1) 8) -- "12345678"
    putStrLn $ show (takeUpToH m (1,0) 8) -- "abcdefgh"
    putStrLn $ show (takeUpToH m (1,1) 8) -- "bcdefghi"
    putStrLn ""
    putStrLn $ show (takeUpToH m (0,1) 0) -- ""
    putStrLn $ show (takeUpToH m (1,0) 20) -- "abcdefghij" pega ate o fim nao da erro
    putStrLn $ show (takeUpToH m (1,1) 1) -- "b"

    putStrLn "Verticals"
    putStrLn $ show (takeUpToV m (0,0) 3) -- "01234567"
    putStrLn $ show (takeUpToV m (0,1) 3) -- "12345678"
    putStrLn $ show (takeUpToV m (1,0) 3) -- "abcdefgh"
    putStrLn $ show (takeUpToV m (1,1) 3) -- "bcdefghi"
    putStrLn ""
    putStrLn $ show (takeUpToV m (0,1) 0) -- ""
    putStrLn $ show (takeUpToV m (1,0) 20) -- "abcdefghij" pega ate o fim nao da erro
    putStrLn $ show (takeUpToV m (1,1) 1) -- "b"
